// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/addressbook/show": {
            "get": {
                "description": "Endpoint to retrieve and display entries from the address book in JSON format.",
                "tags": [
                    "address book"
                ],
                "summary": "Get address book entries",
                "operationId": "ShowAddressBook",
                "responses": {
                    "200": {
                        "description": "Address book entries successfully retrieved",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error creating JSON response",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blockchain/show": {
            "get": {
                "description": "Endpoint to retrieve and display the blockchain data in plain text format.",
                "tags": [
                    "blockchain"
                ],
                "summary": "Show blockchain data",
                "operationId": "ShowBlockchain",
                "responses": {
                    "200": {
                        "description": "Blockchain data successfully retrieved",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/message/show/{from}": {
            "get": {
                "description": "Endpoint to retrieve and display messages between the logged-in user and the specified sender.",
                "tags": [
                    "messages"
                ],
                "summary": "Get messages between users",
                "operationId": "GetMessage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the sender",
                        "name": "from",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Messages successfully retrieved",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error encoding JSON",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tnx/create/{receiver}/media": {
            "post": {
                "description": "Creates a transaction with a media file for transmission from sender to receiver.",
                "tags": [
                    "transactions"
                ],
                "summary": "Creates a transaction with a media file",
                "operationId": "AddTnxWithMultimedia",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recipient's name",
                        "name": "receiver",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Multimedia file for transmission",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Transaction successfully sent",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Request error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "413": {
                        "description": "The file is too big",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tnx/create/{receiver}/text": {
            "get": {
                "description": "Creates a transaction with a text message for transmission from sender to receiver.",
                "tags": [
                    "transactions"
                ],
                "summary": "Creates a transaction with a text message",
                "operationId": "AddTnxWithText",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Receiver's name",
                        "name": "receiver",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Text data",
                        "name": "data",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Transaction successfully sent",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Request error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/create": {
            "post": {
                "description": "Endpoint to create a new user with the provided public key, nickname, and password.",
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "operationId": "CreateUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Public key of the user (base-10 string)",
                        "name": "pk",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Nickname for the new user",
                        "name": "nickname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password for the new user",
                        "name": "password",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/find/{user}": {
            "get": {
                "description": "Endpoint to find and display user information based on the provided username.",
                "tags": [
                    "users"
                ],
                "summary": "Find user by username",
                "operationId": "FindUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the user to find",
                        "name": "user",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information successfully retrieved",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/login/{nickname}": {
            "get": {
                "description": "Endpoint to authenticate a user based on the provided nickname and password.",
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate user",
                "operationId": "LoginUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User nickname",
                        "name": "nickname",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User password",
                        "name": "password",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access accepted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "description": "Endpoint to retrieve and display the profile of the logged-in user.",
                "tags": [
                    "users"
                ],
                "summary": "Show user profile",
                "operationId": "ShowUserProfile",
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
